---
import Default from "@astrojs/starlight/components/MarkdownContent.astro";
import type { Props } from "@astrojs/starlight/props";

import config from "virtual:starlight-client-mermaid";
const { className } = config;

declare global {
  interface Window {
    __mermaidClassName: string;
  }
}
---

<Default {...Astro.props}>
  <slot />
  <script define:vars={{ className }} is:inline>
    window.__mermaidClassName = className;
  </script>
  <script>
    async function renderDiagrams(graphs: HTMLCollectionOf<Element>) {
      const { default: mermaid } = await import("mermaid");

      function render() {
        const theme =
          document.documentElement.getAttribute("data-theme") === "dark"
            ? "dark"
            : "default";

        mermaid.initialize({ startOnLoad: false, theme });

        for (const graph of graphs) {
          const content = graph.getAttribute("data-content");
          if (!content) continue;
          const id = "mermaid-" + Math.round(Math.random() * 100000);
          mermaid
            .render(id, content)
            .then((result) => {
              graph.innerHTML = result.svg;
              graph.setAttribute("data-status", "rendered");
            })
            .catch((e) => {
              graph.innerHTML = e;
              graph.setAttribute("data-status", "error");
            });
        }
      }

      render();

      const themeObserver = new MutationObserver(render);
      themeObserver.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["data-theme"],
      });
    }

    const mermaidGraphs = document.getElementsByClassName(
      window.__mermaidClassName,
    );
    if (mermaidGraphs.length > 0) {
      renderDiagrams(mermaidGraphs);
    }
  </script>
</Default>
