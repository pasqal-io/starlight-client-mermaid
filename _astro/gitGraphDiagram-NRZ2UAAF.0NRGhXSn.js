import{p as Y}from"./chunk-TMUBEWPD.CofKQNZ0.js";import{I as K}from"./chunk-KFBOBJHC.Cyd1kIpq.js";import{B as U,_ as l,d as V,C as X,D as J,E as Q,l as m,s as Z,g as ee,b as re,c as te,p as ae,q as ne,e as E,v as se,j as ce,u as oe,F as ie}from"./mermaid.core.BxvslwKV.js";import{p as de}from"./gitGraph-YCYPL57B.w9D2hCBF.js";import"./preload-helper.CLcXU_4U.js";import"./_baseUniq.C10VcAdn.js";import"./_basePickBy.o59C_aLD.js";import"./clone.DxiTL1m7.js";var x={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},he=U.gitGraph,I=l(()=>X({...he,...J().gitGraph}),"getConfig"),o=new K(()=>{const t=I(),e=t.mainBranchName,n=t.mainBranchOrder;return{mainBranchName:e,commits:new Map,head:null,branchConfig:new Map([[e,{name:e,order:n}]]),branches:new Map([[e,null]]),currBranch:e,direction:"LR",seq:0,options:{}}});function A(){return Q({length:7})}l(A,"getID");function z(t,e){const n=Object.create(null);return t.reduce((s,r)=>{const a=e(r);return n[a]||(n[a]=!0,s.push(r)),s},[])}l(z,"uniqBy");var le=l(function(t){o.records.direction=t},"setDirection"),$e=l(function(t){m.debug("options str",t),t=t?.trim(),t=t||"{}";try{o.records.options=JSON.parse(t)}catch(e){m.error("error while parsing gitGraph options",e.message)}},"setOptions"),fe=l(function(){return o.records.options},"getOptions"),ge=l(function(t){let e=t.msg,n=t.id;const s=t.type;let r=t.tags;m.info("commit",e,n,s,r),m.debug("Entering commit:",e,n,s,r);const a=I();n=E.sanitizeText(n,a),e=E.sanitizeText(e,a),r=r?.map(c=>E.sanitizeText(c,a));const d={id:n||o.records.seq+"-"+A(),message:e,seq:o.records.seq++,type:s??x.NORMAL,tags:r??[],parents:o.records.head==null?[]:[o.records.head.id],branch:o.records.currBranch};o.records.head=d,m.info("main branch",a.mainBranchName),o.records.commits.set(d.id,d),o.records.branches.set(o.records.currBranch,d.id),m.debug("in pushCommit "+d.id)},"commit"),ue=l(function(t){let e=t.name;const n=t.order;if(e=E.sanitizeText(e,I()),o.records.branches.has(e))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${e}")`);o.records.branches.set(e,o.records.head!=null?o.records.head.id:null),o.records.branchConfig.set(e,{name:e,order:n}),D(e),m.debug("in createBranch")},"branch"),ye=l(t=>{let e=t.branch,n=t.id;const s=t.type,r=t.tags,a=I();e=E.sanitizeText(e,a),n&&(n=E.sanitizeText(n,a));const d=o.records.branches.get(o.records.currBranch),c=o.records.branches.get(e),f=d?o.records.commits.get(d):void 0,h=c?o.records.commits.get(c):void 0;if(f&&h&&f.branch===e)throw new Error(`Cannot merge branch '${e}' into itself.`);if(o.records.currBranch===e){const i=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw i.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},i}if(f===void 0||!f){const i=new Error(`Incorrect usage of "merge". Current branch (${o.records.currBranch})has no commits`);throw i.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]},i}if(!o.records.branches.has(e)){const i=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw i.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]},i}if(h===void 0||!h){const i=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw i.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']},i}if(f===h){const i=new Error('Incorrect usage of "merge". Both branches have same head');throw i.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},i}if(n&&o.records.commits.has(n)){const i=new Error('Incorrect usage of "merge". Commit with id:'+n+" already exists, use different custom Id");throw i.hash={text:`merge ${e} ${n} ${s} ${r?.join(" ")}`,token:`merge ${e} ${n} ${s} ${r?.join(" ")}`,expected:[`merge ${e} ${n}_UNIQUE ${s} ${r?.join(" ")}`]},i}const $=c||"",g={id:n||`${o.records.seq}-${A()}`,message:`merged branch ${e} into ${o.records.currBranch}`,seq:o.records.seq++,parents:o.records.head==null?[]:[o.records.head.id,$],branch:o.records.currBranch,type:x.MERGE,customType:s,customId:!!n,tags:r??[]};o.records.head=g,o.records.commits.set(g.id,g),o.records.branches.set(o.records.currBranch,g.id),m.debug(o.records.branches),m.debug("in mergeBranch")},"merge"),pe=l(function(t){let e=t.id,n=t.targetId,s=t.tags,r=t.parent;m.debug("Entering cherryPick:",e,n,s);const a=I();if(e=E.sanitizeText(e,a),n=E.sanitizeText(n,a),s=s?.map(f=>E.sanitizeText(f,a)),r=E.sanitizeText(r,a),!e||!o.records.commits.has(e)){const f=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw f.hash={text:`cherryPick ${e} ${n}`,token:`cherryPick ${e} ${n}`,expected:["cherry-pick abc"]},f}const d=o.records.commits.get(e);if(d===void 0||!d)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(r&&!(Array.isArray(d.parents)&&d.parents.includes(r)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const c=d.branch;if(d.type===x.MERGE&&!r)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!n||!o.records.commits.has(n)){if(c===o.records.currBranch){const g=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw g.hash={text:`cherryPick ${e} ${n}`,token:`cherryPick ${e} ${n}`,expected:["cherry-pick abc"]},g}const f=o.records.branches.get(o.records.currBranch);if(f===void 0||!f){const g=new Error(`Incorrect usage of "cherry-pick". Current branch (${o.records.currBranch})has no commits`);throw g.hash={text:`cherryPick ${e} ${n}`,token:`cherryPick ${e} ${n}`,expected:["cherry-pick abc"]},g}const h=o.records.commits.get(f);if(h===void 0||!h){const g=new Error(`Incorrect usage of "cherry-pick". Current branch (${o.records.currBranch})has no commits`);throw g.hash={text:`cherryPick ${e} ${n}`,token:`cherryPick ${e} ${n}`,expected:["cherry-pick abc"]},g}const $={id:o.records.seq+"-"+A(),message:`cherry-picked ${d?.message} into ${o.records.currBranch}`,seq:o.records.seq++,parents:o.records.head==null?[]:[o.records.head.id,d.id],branch:o.records.currBranch,type:x.CHERRY_PICK,tags:s?s.filter(Boolean):[`cherry-pick:${d.id}${d.type===x.MERGE?`|parent:${r}`:""}`]};o.records.head=$,o.records.commits.set($.id,$),o.records.branches.set(o.records.currBranch,$.id),m.debug(o.records.branches),m.debug("in cherryPick")}},"cherryPick"),D=l(function(t){if(t=E.sanitizeText(t,I()),o.records.branches.has(t)){o.records.currBranch=t;const e=o.records.branches.get(o.records.currBranch);e===void 0||!e?o.records.head=null:o.records.head=o.records.commits.get(e)??null}else{const e=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw e.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},e}},"checkout");function H(t,e,n){const s=t.indexOf(e);s===-1?t.push(n):t.splice(s,1,n)}l(H,"upsert");function P(t){const e=t.reduce((r,a)=>r.seq>a.seq?r:a,t[0]);let n="";t.forEach(function(r){r===e?n+="	*":n+="	|"});const s=[n,e.id,e.seq];for(const r in o.records.branches)o.records.branches.get(r)===e.id&&s.push(r);if(m.debug(s.join(" ")),e.parents&&e.parents.length==2&&e.parents[0]&&e.parents[1]){const r=o.records.commits.get(e.parents[0]);H(t,e,r),e.parents[1]&&t.push(o.records.commits.get(e.parents[1]))}else{if(e.parents.length==0)return;if(e.parents[0]){const r=o.records.commits.get(e.parents[0]);H(t,e,r)}}t=z(t,r=>r.id),P(t)}l(P,"prettyPrintCommitHistory");var xe=l(function(){m.debug(o.records.commits);const t=N()[0];P([t])},"prettyPrint"),me=l(function(){o.reset(),se()},"clear"),be=l(function(){return[...o.records.branchConfig.values()].map((e,n)=>e.order!==null&&e.order!==void 0?e:{...e,order:parseFloat(`0.${n}`)}).sort((e,n)=>(e.order??0)-(n.order??0)).map(({name:e})=>({name:e}))},"getBranchesAsObjArray"),we=l(function(){return o.records.branches},"getBranches"),Ce=l(function(){return o.records.commits},"getCommits"),N=l(function(){const t=[...o.records.commits.values()];return t.forEach(function(e){m.debug(e.id)}),t.sort((e,n)=>e.seq-n.seq),t},"getCommitsArray"),Ee=l(function(){return o.records.currBranch},"getCurrentBranch"),ve=l(function(){return o.records.direction},"getDirection"),Te=l(function(){return o.records.head},"getHead"),S={commitType:x,getConfig:I,setDirection:le,setOptions:$e,getOptions:fe,commit:ge,branch:ue,merge:ye,cherryPick:pe,checkout:D,prettyPrint:xe,clear:me,getBranchesAsObjArray:be,getBranches:we,getCommits:Ce,getCommitsArray:N,getCurrentBranch:Ee,getDirection:ve,getHead:Te,setAccTitle:Z,getAccTitle:ee,getAccDescription:re,setAccDescription:te,setDiagramTitle:ae,getDiagramTitle:ne},Be=l((t,e)=>{Y(t,e),t.dir&&e.setDirection(t.dir);for(const n of t.statements)Le(n,e)},"populate"),Le=l((t,e)=>{const s={Commit:l(r=>e.commit(ke(r)),"Commit"),Branch:l(r=>e.branch(Me(r)),"Branch"),Merge:l(r=>e.merge(Ie(r)),"Merge"),Checkout:l(r=>e.checkout(Re(r)),"Checkout"),CherryPicking:l(r=>e.cherryPick(Ge(r)),"CherryPicking")}[t.$type];s?s(t):m.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),ke=l(t=>({id:t.id,msg:t.message??"",type:t.type!==void 0?x[t.type]:x.NORMAL,tags:t.tags??void 0}),"parseCommit"),Me=l(t=>({name:t.name,order:t.order??0}),"parseBranch"),Ie=l(t=>({branch:t.branch,id:t.id??"",type:t.type!==void 0?x[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),Re=l(t=>t.branch,"parseCheckout"),Ge=l(t=>({id:t.id,targetId:"",tags:t.tags?.length===0?void 0:t.tags,parent:t.parent}),"parseCherryPicking"),Oe={parse:l(async t=>{const e=await de("gitGraph",t);m.debug(e),Be(e,S)},"parse")},qe=V(),C=qe?.gitGraph,L=10,k=40,v=4,T=2,M=8,b=new Map,w=new Map,O=30,R=new Map,q=[],B=0,y="LR",Ae=l(()=>{b.clear(),w.clear(),R.clear(),B=0,q=[],y="LR"},"clear"),W=l(t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof t=="string"?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(s=>{const r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),r.setAttribute("class","row"),r.textContent=s.trim(),e.appendChild(r)}),e},"drawText"),j=l(t=>{let e,n,s;return y==="BT"?(n=l((r,a)=>r<=a,"comparisonFunc"),s=1/0):(n=l((r,a)=>r>=a,"comparisonFunc"),s=0),t.forEach(r=>{const a=y==="TB"||y=="BT"?w.get(r)?.y:w.get(r)?.x;a!==void 0&&n(a,s)&&(e=r,s=a)}),e},"findClosestParent"),_e=l(t=>{let e="",n=1/0;return t.forEach(s=>{const r=w.get(s).y;r<=n&&(e=s,n=r)}),e||void 0},"findClosestParentBT"),He=l((t,e,n)=>{let s=n,r=n;const a=[];t.forEach(d=>{const c=e.get(d);if(!c)throw new Error(`Commit not found for key ${d}`);c.parents.length?(s=Fe(c),r=Math.max(s,r)):a.push(c),ze(c,s)}),s=r,a.forEach(d=>{De(d,s,n)}),t.forEach(d=>{const c=e.get(d);if(c?.parents.length){const f=_e(c.parents);s=w.get(f).y-k,s<=r&&(r=s);const h=b.get(c.branch).pos,$=s-L;w.set(c.id,{x:h,y:$})}})},"setParallelBTPos"),Pe=l(t=>{const e=j(t.parents.filter(s=>s!==null));if(!e)throw new Error(`Closest parent not found for commit ${t.id}`);const n=w.get(e)?.y;if(n===void 0)throw new Error(`Closest parent position not found for commit ${t.id}`);return n},"findClosestParentPos"),Fe=l(t=>Pe(t)+k,"calculateCommitPosition"),ze=l((t,e)=>{const n=b.get(t.branch);if(!n)throw new Error(`Branch not found for commit ${t.id}`);const s=n.pos,r=e+L;return w.set(t.id,{x:s,y:r}),{x:s,y:r}},"setCommitPosition"),De=l((t,e,n)=>{const s=b.get(t.branch);if(!s)throw new Error(`Branch not found for commit ${t.id}`);const r=e+n,a=s.pos;w.set(t.id,{x:a,y:r})},"setRootPosition"),Ne=l((t,e,n,s,r,a)=>{if(a===x.HIGHLIGHT)t.append("rect").attr("x",n.x-10).attr("y",n.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${r%M} ${s}-outer`),t.append("rect").attr("x",n.x-6).attr("y",n.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${r%M} ${s}-inner`);else if(a===x.CHERRY_PICK)t.append("circle").attr("cx",n.x).attr("cy",n.y).attr("r",10).attr("class",`commit ${e.id} ${s}`),t.append("circle").attr("cx",n.x-3).attr("cy",n.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${s}`),t.append("circle").attr("cx",n.x+3).attr("cy",n.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${s}`),t.append("line").attr("x1",n.x+3).attr("y1",n.y+1).attr("x2",n.x).attr("y2",n.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${s}`),t.append("line").attr("x1",n.x-3).attr("y1",n.y+1).attr("x2",n.x).attr("y2",n.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${s}`);else{const d=t.append("circle");if(d.attr("cx",n.x),d.attr("cy",n.y),d.attr("r",e.type===x.MERGE?9:10),d.attr("class",`commit ${e.id} commit${r%M}`),a===x.MERGE){const c=t.append("circle");c.attr("cx",n.x),c.attr("cy",n.y),c.attr("r",6),c.attr("class",`commit ${s} ${e.id} commit${r%M}`)}a===x.REVERSE&&t.append("path").attr("d",`M ${n.x-5},${n.y-5}L${n.x+5},${n.y+5}M${n.x-5},${n.y+5}L${n.x+5},${n.y-5}`).attr("class",`commit ${s} ${e.id} commit${r%M}`)}},"drawCommitBullet"),Se=l((t,e,n,s)=>{if(e.type!==x.CHERRY_PICK&&(e.customId&&e.type===x.MERGE||e.type!==x.MERGE)&&C?.showCommitLabel){const r=t.append("g"),a=r.insert("rect").attr("class","commit-label-bkg"),d=r.append("text").attr("x",s).attr("y",n.y+25).attr("class","commit-label").text(e.id),c=d.node()?.getBBox();if(c&&(a.attr("x",n.posWithOffset-c.width/2-T).attr("y",n.y+13.5).attr("width",c.width+2*T).attr("height",c.height+2*T),y==="TB"||y==="BT"?(a.attr("x",n.x-(c.width+4*v+5)).attr("y",n.y-12),d.attr("x",n.x-(c.width+4*v)).attr("y",n.y+c.height-12)):d.attr("x",n.posWithOffset-c.width/2),C.rotateCommitLabel))if(y==="TB"||y==="BT")d.attr("transform","rotate(-45, "+n.x+", "+n.y+")"),a.attr("transform","rotate(-45, "+n.x+", "+n.y+")");else{const f=-7.5-(c.width+10)/25*9.5,h=10+c.width/25*8.5;r.attr("transform","translate("+f+", "+h+") rotate(-45, "+s+", "+n.y+")")}}},"drawCommitLabel"),We=l((t,e,n,s)=>{if(e.tags.length>0){let r=0,a=0,d=0;const c=[];for(const f of e.tags.reverse()){const h=t.insert("polygon"),$=t.append("circle"),g=t.append("text").attr("y",n.y-16-r).attr("class","tag-label").text(f),i=g.node()?.getBBox();if(!i)throw new Error("Tag bbox not found");a=Math.max(a,i.width),d=Math.max(d,i.height),g.attr("x",n.posWithOffset-i.width/2),c.push({tag:g,hole:$,rect:h,yOffset:r}),r+=20}for(const{tag:f,hole:h,rect:$,yOffset:g}of c){const i=d/2,u=n.y-19.2-g;if($.attr("class","tag-label-bkg").attr("points",`
      ${s-a/2-v/2},${u+T}  
      ${s-a/2-v/2},${u-T}
      ${n.posWithOffset-a/2-v},${u-i-T}
      ${n.posWithOffset+a/2+v},${u-i-T}
      ${n.posWithOffset+a/2+v},${u+i+T}
      ${n.posWithOffset-a/2-v},${u+i+T}`),h.attr("cy",u).attr("cx",s-a/2+v/2).attr("r",1.5).attr("class","tag-hole"),y==="TB"||y==="BT"){const p=s+g;$.attr("class","tag-label-bkg").attr("points",`
        ${n.x},${p+2}
        ${n.x},${p-2}
        ${n.x+L},${p-i-2}
        ${n.x+L+a+4},${p-i-2}
        ${n.x+L+a+4},${p+i+2}
        ${n.x+L},${p+i+2}`).attr("transform","translate(12,12) rotate(45, "+n.x+","+s+")"),h.attr("cx",n.x+v/2).attr("cy",p).attr("transform","translate(12,12) rotate(45, "+n.x+","+s+")"),f.attr("x",n.x+5).attr("y",p+3).attr("transform","translate(14,14) rotate(45, "+n.x+","+s+")")}}}},"drawCommitTags"),je=l(t=>{switch(t.customType??t.type){case x.NORMAL:return"commit-normal";case x.REVERSE:return"commit-reverse";case x.HIGHLIGHT:return"commit-highlight";case x.MERGE:return"commit-merge";case x.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Ye=l((t,e,n,s)=>{const r={x:0,y:0};if(t.parents.length>0){const a=j(t.parents);if(a){const d=s.get(a)??r;return e==="TB"?d.y+k:e==="BT"?(s.get(t.id)??r).y-k:d.x+k}}else return e==="TB"?O:e==="BT"?(s.get(t.id)??r).y-k:0;return 0},"calculatePosition"),Ke=l((t,e,n)=>{const s=y==="BT"&&n?e:e+L,r=y==="TB"||y==="BT"?s:b.get(t.branch)?.pos,a=y==="TB"||y==="BT"?b.get(t.branch)?.pos:s;if(a===void 0||r===void 0)throw new Error(`Position were undefined for commit ${t.id}`);return{x:a,y:r,posWithOffset:s}},"getCommitPosition"),F=l((t,e,n)=>{if(!C)throw new Error("GitGraph config not found");const s=t.append("g").attr("class","commit-bullets"),r=t.append("g").attr("class","commit-labels");let a=y==="TB"||y==="BT"?O:0;const d=[...e.keys()],c=C?.parallelCommits??!1,f=l(($,g)=>{const i=e.get($)?.seq,u=e.get(g)?.seq;return i!==void 0&&u!==void 0?i-u:0},"sortKeys");let h=d.sort(f);y==="BT"&&(c&&He(h,e,a),h=h.reverse()),h.forEach($=>{const g=e.get($);if(!g)throw new Error(`Commit not found for key ${$}`);c&&(a=Ye(g,y,a,w));const i=Ke(g,a,c);if(n){const u=je(g),p=g.customType??g.type,_=b.get(g.branch)?.index??0;Ne(s,g,i,u,_,p),Se(r,g,i,a),We(r,g,i,a)}y==="TB"||y==="BT"?w.set(g.id,{x:i.x,y:i.posWithOffset}):w.set(g.id,{x:i.posWithOffset,y:i.y}),a=y==="BT"&&c?a+k:a+k+L,a>B&&(B=a)})},"drawCommits"),Ue=l((t,e,n,s,r)=>{const d=(y==="TB"||y==="BT"?n.x<s.x:n.y<s.y)?e.branch:t.branch,c=l(h=>h.branch===d,"isOnBranchToGetCurve"),f=l(h=>h.seq>t.seq&&h.seq<e.seq,"isBetweenCommits");return[...r.values()].some(h=>f(h)&&c(h))},"shouldRerouteArrow"),G=l((t,e,n=0)=>{const s=t+Math.abs(t-e)/2;if(n>5)return s;if(q.every(d=>Math.abs(d-s)>=10))return q.push(s),s;const a=Math.abs(t-e);return G(t,e-a/5,n+1)},"findLane"),Ve=l((t,e,n,s)=>{const r=w.get(e.id),a=w.get(n.id);if(r===void 0||a===void 0)throw new Error(`Commit positions not found for commits ${e.id} and ${n.id}`);const d=Ue(e,n,r,a,s);let c="",f="",h=0,$=0,g=b.get(n.branch)?.index;n.type===x.MERGE&&e.id!==n.parents[0]&&(g=b.get(e.branch)?.index);let i;if(d){c="A 10 10, 0, 0, 0,",f="A 10 10, 0, 0, 1,",h=10,$=10;const u=r.y<a.y?G(r.y,a.y):G(a.y,r.y),p=r.x<a.x?G(r.x,a.x):G(a.x,r.x);y==="TB"?r.x<a.x?i=`M ${r.x} ${r.y} L ${p-h} ${r.y} ${f} ${p} ${r.y+$} L ${p} ${a.y-h} ${c} ${p+$} ${a.y} L ${a.x} ${a.y}`:(g=b.get(e.branch)?.index,i=`M ${r.x} ${r.y} L ${p+h} ${r.y} ${c} ${p} ${r.y+$} L ${p} ${a.y-h} ${f} ${p-$} ${a.y} L ${a.x} ${a.y}`):y==="BT"?r.x<a.x?i=`M ${r.x} ${r.y} L ${p-h} ${r.y} ${c} ${p} ${r.y-$} L ${p} ${a.y+h} ${f} ${p+$} ${a.y} L ${a.x} ${a.y}`:(g=b.get(e.branch)?.index,i=`M ${r.x} ${r.y} L ${p+h} ${r.y} ${f} ${p} ${r.y-$} L ${p} ${a.y+h} ${c} ${p-$} ${a.y} L ${a.x} ${a.y}`):r.y<a.y?i=`M ${r.x} ${r.y} L ${r.x} ${u-h} ${c} ${r.x+$} ${u} L ${a.x-h} ${u} ${f} ${a.x} ${u+$} L ${a.x} ${a.y}`:(g=b.get(e.branch)?.index,i=`M ${r.x} ${r.y} L ${r.x} ${u+h} ${f} ${r.x+$} ${u} L ${a.x-h} ${u} ${c} ${a.x} ${u-$} L ${a.x} ${a.y}`)}else c="A 20 20, 0, 0, 0,",f="A 20 20, 0, 0, 1,",h=20,$=20,y==="TB"?(r.x<a.x&&(n.type===x.MERGE&&e.id!==n.parents[0]?i=`M ${r.x} ${r.y} L ${r.x} ${a.y-h} ${c} ${r.x+$} ${a.y} L ${a.x} ${a.y}`:i=`M ${r.x} ${r.y} L ${a.x-h} ${r.y} ${f} ${a.x} ${r.y+$} L ${a.x} ${a.y}`),r.x>a.x&&(c="A 20 20, 0, 0, 0,",f="A 20 20, 0, 0, 1,",h=20,$=20,n.type===x.MERGE&&e.id!==n.parents[0]?i=`M ${r.x} ${r.y} L ${r.x} ${a.y-h} ${f} ${r.x-$} ${a.y} L ${a.x} ${a.y}`:i=`M ${r.x} ${r.y} L ${a.x+h} ${r.y} ${c} ${a.x} ${r.y+$} L ${a.x} ${a.y}`),r.x===a.x&&(i=`M ${r.x} ${r.y} L ${a.x} ${a.y}`)):y==="BT"?(r.x<a.x&&(n.type===x.MERGE&&e.id!==n.parents[0]?i=`M ${r.x} ${r.y} L ${r.x} ${a.y+h} ${f} ${r.x+$} ${a.y} L ${a.x} ${a.y}`:i=`M ${r.x} ${r.y} L ${a.x-h} ${r.y} ${c} ${a.x} ${r.y-$} L ${a.x} ${a.y}`),r.x>a.x&&(c="A 20 20, 0, 0, 0,",f="A 20 20, 0, 0, 1,",h=20,$=20,n.type===x.MERGE&&e.id!==n.parents[0]?i=`M ${r.x} ${r.y} L ${r.x} ${a.y+h} ${c} ${r.x-$} ${a.y} L ${a.x} ${a.y}`:i=`M ${r.x} ${r.y} L ${a.x-h} ${r.y} ${c} ${a.x} ${r.y-$} L ${a.x} ${a.y}`),r.x===a.x&&(i=`M ${r.x} ${r.y} L ${a.x} ${a.y}`)):(r.y<a.y&&(n.type===x.MERGE&&e.id!==n.parents[0]?i=`M ${r.x} ${r.y} L ${a.x-h} ${r.y} ${f} ${a.x} ${r.y+$} L ${a.x} ${a.y}`:i=`M ${r.x} ${r.y} L ${r.x} ${a.y-h} ${c} ${r.x+$} ${a.y} L ${a.x} ${a.y}`),r.y>a.y&&(n.type===x.MERGE&&e.id!==n.parents[0]?i=`M ${r.x} ${r.y} L ${a.x-h} ${r.y} ${c} ${a.x} ${r.y-$} L ${a.x} ${a.y}`:i=`M ${r.x} ${r.y} L ${r.x} ${a.y+h} ${f} ${r.x+$} ${a.y} L ${a.x} ${a.y}`),r.y===a.y&&(i=`M ${r.x} ${r.y} L ${a.x} ${a.y}`));if(i===void 0)throw new Error("Line definition not found");t.append("path").attr("d",i).attr("class","arrow arrow"+g%M)},"drawArrow"),Xe=l((t,e)=>{const n=t.append("g").attr("class","commit-arrows");[...e.keys()].forEach(s=>{const r=e.get(s);r.parents&&r.parents.length>0&&r.parents.forEach(a=>{Ve(n,e.get(a),r,e)})})},"drawArrows"),Je=l((t,e)=>{const n=t.append("g");e.forEach((s,r)=>{const a=r%M,d=b.get(s.name)?.pos;if(d===void 0)throw new Error(`Position not found for branch ${s.name}`);const c=n.append("line");c.attr("x1",0),c.attr("y1",d),c.attr("x2",B),c.attr("y2",d),c.attr("class","branch branch"+a),y==="TB"?(c.attr("y1",O),c.attr("x1",d),c.attr("y2",B),c.attr("x2",d)):y==="BT"&&(c.attr("y1",B),c.attr("x1",d),c.attr("y2",O),c.attr("x2",d)),q.push(d);const f=s.name,h=W(f),$=n.insert("rect"),i=n.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);i.node().appendChild(h);const u=h.getBBox();$.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-u.width-4-(C?.rotateCommitLabel===!0?30:0)).attr("y",-u.height/2+8).attr("width",u.width+18).attr("height",u.height+4),i.attr("transform","translate("+(-u.width-14-(C?.rotateCommitLabel===!0?30:0))+", "+(d-u.height/2-1)+")"),y==="TB"?($.attr("x",d-u.width/2-10).attr("y",0),i.attr("transform","translate("+(d-u.width/2-5)+", 0)")):y==="BT"?($.attr("x",d-u.width/2-10).attr("y",B),i.attr("transform","translate("+(d-u.width/2-5)+", "+B+")")):$.attr("transform","translate(-19, "+(d-u.height/2)+")")})},"drawBranches"),Qe=l(function(t,e,n,s,r){return b.set(t,{pos:e,index:n}),e+=50+(r?40:0)+(y==="TB"||y==="BT"?s.width/2:0),e},"setBranchPosition"),Ze=l(function(t,e,n,s){if(Ae(),m.debug("in gitgraph renderer",t+`
`,"id:",e,n),!C)throw new Error("GitGraph config not found");const r=C.rotateCommitLabel??!1,a=s.db;R=a.getCommits();const d=a.getBranchesAsObjArray();y=a.getDirection();const c=ce(`[id="${e}"]`);let f=0;d.forEach((h,$)=>{const g=W(h.name),i=c.append("g"),u=i.insert("g").attr("class","branchLabel"),p=u.insert("g").attr("class","label branch-label");p.node()?.appendChild(g);const _=g.getBBox();f=Qe(h.name,f,$,_,r),p.remove(),u.remove(),i.remove()}),F(c,R,!1),C.showBranches&&Je(c,d),Xe(c,R),F(c,R,!0),oe.insertTitle(c,"gitTitleText",C.titleTopMargin??0,a.getDiagramTitle()),ie(void 0,c,C.diagramPadding,C.useMaxWidth)},"draw"),er={draw:Ze},rr=l(t=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(e=>`
        .branch-label${e} { fill: ${t["gitBranchLabel"+e]}; }
        .commit${e} { stroke: ${t["git"+e]}; fill: ${t["git"+e]}; }
        .commit-highlight${e} { stroke: ${t["gitInv"+e]}; fill: ${t["gitInv"+e]}; }
        .label${e}  { fill: ${t["git"+e]}; }
        .arrow${e} { stroke: ${t["git"+e]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${t.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}
  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}
  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }
  .tag-hole { fill: ${t.textColor}; }

  .commit-merge {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }
  .commit-reverse {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${t.textColor};
  }
`,"getStyles"),tr=rr,lr={parser:Oe,db:S,renderer:er,styles:tr};export{lr as diagram};
